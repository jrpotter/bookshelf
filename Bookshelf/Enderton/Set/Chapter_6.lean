import Common.Logic.Basic
import Common.Nat.Basic
import Common.Set.Basic
import Common.Set.Finite
import Mathlib.Data.Finset.Card
import Mathlib.Data.Set.Finite
import Mathlib.Tactic.LibrarySearch

/-! # Enderton.Set.Chapter_6

Cardinal Numbers and the Axiom of Choice

NOTE: We choose to use injectivity/surjectivity concepts found in
`Mathlib.Data.Set.Function` over those in `Mathlib.Init.Function` since the
former provides noncomputable utilities around obtaining inverse functions
(namely `Function.invFunOn`).
-/

namespace Enderton.Set.Chapter_6

/-- #### Theorem 6B

No set is equinumerous to its powerset.
-/
theorem theorem_6b (A : Set Œ±)
  : ‚àÄ f, ¬¨ Set.BijOn f A (ùí´ A) := by
  intro f hf
  unfold Set.BijOn at hf
  let œÜ := { a ‚àà A | a ‚àâ f a }
  suffices ‚àÄ a ‚àà A, f a ‚â† œÜ by
    have hœÜ := hf.right.right (show œÜ ‚àà ùí´ A by simp)
    have ‚ü®a, ha‚ü© := hœÜ
    exact absurd ha.right (this a ha.left)
  intro a ha hfa
  by_cases h : a ‚àà f a
  ¬∑ have h' := h
    rw [hfa] at h
    simp only [Set.mem_setOf_eq] at h
    exact absurd h' h.right
  ¬∑ rw [Set.Subset.antisymm_iff] at hfa
    have := hfa.right ‚ü®ha, h‚ü©
    exact absurd this h

/-! ### Pigeonhole Principle -/

/--
A subset of a finite set of natural numbers has a max member.
-/
lemma subset_finite_max_nat {S' S : Set ‚Ñï}
  (hS : Set.Finite S) (hS' : Set.Nonempty S') (h : S' ‚äÜ S)
  : ‚àÉ m, m ‚àà S' ‚àß ‚àÄ n, n ‚àà S' ‚Üí n ‚â§ m := by
  have ‚ü®m, hm‚ÇÅ, hm‚ÇÇ‚ü© :=
    Set.Finite.exists_maximal_wrt id S' (Set.Finite.subset hS h) hS'
  simp only [id_eq] at hm‚ÇÇ
  refine ‚ü®m, hm‚ÇÅ, ?_‚ü©
  intro n hn
  match @trichotomous ‚Ñï LT.lt _ m n with
  | Or.inr (Or.inl r) => exact Nat.le_of_eq r.symm
  | Or.inl r =>
    have := hm‚ÇÇ n hn (Nat.le_of_lt r)
    exact Nat.le_of_eq this.symm
  | Or.inr (Or.inr r) => exact Nat.le_of_lt r

/--
Auxiliary function to be proven by induction.
-/
lemma pigeonhole_principle_aux (n : ‚Ñï)
  : ‚àÄ M, M ‚äÇ Set.Iio n ‚Üí
      ‚àÄ f : ‚Ñï ‚Üí ‚Ñï,
        Set.MapsTo f M (Set.Iio n) ‚àß Set.InjOn f M ‚Üí
        ¬¨ Set.SurjOn f M (Set.Iio n) := by
  induction n with
  | zero =>
    intro _ hM
    unfold Set.Iio at hM
    simp only [Nat.zero_eq, not_lt_zero', Set.setOf_false] at hM
    rw [Set.ssubset_empty_iff_false] at hM
    exact False.elim hM
  | succ n ih =>
    intro M hM f ‚ü®hf_maps, hf_inj‚ü© hf_surj

    by_cases hM' : M = ‚àÖ
    ¬∑ unfold Set.SurjOn at hf_surj
      rw [hM'] at hf_surj
      simp only [Set.image_empty] at hf_surj
      rw [Set.subset_def] at hf_surj
      exact hf_surj n (show n < n + 1 by simp)

    by_cases h : ¬¨ ‚àÉ t, t ‚àà M ‚àß f t = n
    -- Trivial case. `f` must not be onto if this is the case.
    ¬∑ have ‚ü®t, ht‚ü© := hf_surj (show n ‚àà _ by simp)
      exact absurd ‚ü®t, ht‚ü© h

    -- Continue under the assumption `n ‚àà ran f`.
    simp only [not_not] at h
    have ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü© := h

    -- `M ‚â† ‚àÖ` so `‚àÉ p, ‚àÄ x ‚àà M, p ‚â• x`.
    have ‚ü®p, hp‚ÇÅ, hp‚ÇÇ‚ü© : ‚àÉ p ‚àà M, ‚àÄ x, x ‚àà M ‚Üí p ‚â• x := by
      refine subset_finite_max_nat (show Set.Finite M from ?_) ?_ ?_
      ¬∑ have := Set.finite_lt_nat (n + 1)
        exact Set.Finite.subset this (subset_of_ssubset hM)
      ¬∑ exact Set.nmem_singleton_empty.mp hM'
      ¬∑ show ‚àÄ t, t ‚àà M ‚Üí t ‚àà M
        simp only [imp_self, forall_const]

    -- `g` is a variant of `f` in which the largest element of its domain
    -- (i.e. `p`) corresponds to value `n`.
    let g x := if x = p then n else if x = t then f p else f x

    have hg_maps : Set.MapsTo g M (Set.Iio (n + 1)) := by
      intro x hx
      dsimp only
      by_cases hx‚ÇÅ : x = p
      ¬∑ rw [hx‚ÇÅ]
        simp
      ¬∑ rw [if_neg hx‚ÇÅ]
        by_cases hx‚ÇÇ : x = t
        ¬∑ rw [hx‚ÇÇ]
          simp only [ite_true, Set.mem_Iio]
          exact hf_maps hp‚ÇÅ
        ¬∑ rw [if_neg hx‚ÇÇ]
          simp only [Set.mem_Iio]
          exact hf_maps hx

    have hg_inj : Set.InjOn g M := by
      intro x‚ÇÅ hx‚ÇÅ x‚ÇÇ hx‚ÇÇ hf'
      by_cases hc‚ÇÅ : x‚ÇÅ = p
      ¬∑ by_cases hc‚ÇÇ : x‚ÇÇ = p
        ¬∑ rw [hc‚ÇÅ, hc‚ÇÇ]
        ¬∑ dsimp at hf'
          rw [hc‚ÇÅ] at hf'
          simp only [ite_self, ite_true] at hf'
          by_cases hc‚ÇÉ : x‚ÇÇ = t
          ¬∑ rw [if_neg hc‚ÇÇ, if_pos hc‚ÇÉ, ‚Üê ht‚ÇÇ] at hf'
            rw [hc‚ÇÅ] at hx‚ÇÅ ‚ä¢
            rw [hc‚ÇÉ] at hx‚ÇÇ ‚ä¢
            exact hf_inj hx‚ÇÅ hx‚ÇÇ hf'.symm
          ¬∑ rw [if_neg hc‚ÇÇ, if_neg hc‚ÇÉ, ‚Üê ht‚ÇÇ] at hf'
            have := hf_inj ht‚ÇÅ hx‚ÇÇ hf'
            exact absurd this.symm hc‚ÇÉ
      ¬∑ by_cases hc‚ÇÇ : x‚ÇÇ = p
        ¬∑ rw [hc‚ÇÇ] at hf'
          simp only [ite_self, ite_true] at hf'
          by_cases hc‚ÇÉ : x‚ÇÅ = t
          ¬∑ rw [if_neg hc‚ÇÅ, if_pos hc‚ÇÉ, ‚Üê ht‚ÇÇ] at hf'
            rw [hc‚ÇÉ] at hx‚ÇÅ ‚ä¢
            rw [hc‚ÇÇ] at hx‚ÇÇ ‚ä¢
            have := hf_inj hx‚ÇÇ hx‚ÇÅ hf'
            exact this.symm
          ¬∑ rw [if_neg hc‚ÇÅ, if_neg hc‚ÇÉ, ‚Üê ht‚ÇÇ] at hf'
            have := hf_inj hx‚ÇÅ ht‚ÇÅ hf'
            exact absurd this hc‚ÇÉ
        ¬∑ dsimp only at hf'
          rw [if_neg hc‚ÇÅ, if_neg hc‚ÇÇ] at hf'
          by_cases hc‚ÇÉ : x‚ÇÅ = t
          ¬∑ by_cases hc‚ÇÑ : x‚ÇÇ = t
            ¬∑ rw [hc‚ÇÉ, hc‚ÇÑ]
            ¬∑ rw [if_pos hc‚ÇÉ, if_neg hc‚ÇÑ] at hf'
              have := hf_inj hp‚ÇÅ hx‚ÇÇ hf'
              exact absurd this.symm hc‚ÇÇ
          ¬∑ by_cases hc‚ÇÑ : x‚ÇÇ = t
            ¬∑ rw [if_neg hc‚ÇÉ, if_pos hc‚ÇÑ] at hf'
              have := hf_inj hx‚ÇÅ hp‚ÇÅ hf'
              exact absurd this hc‚ÇÅ
            ¬∑ rw [if_neg hc‚ÇÉ, if_neg hc‚ÇÑ] at hf'
              exact hf_inj hx‚ÇÅ hx‚ÇÇ hf'

    let M' := M \ {p}
    have hM' : M' ‚äÇ Set.Iio n := by
      by_cases hc : p = n
      ¬∑ suffices Set.Iio (n + 1) \ {n} = Set.Iio n by
          have h‚ÇÅ := Set.diff_ssubset_diff_left hM hp‚ÇÅ
          conv at h‚ÇÅ => right; rw [hc]
          rwa [‚Üê this]
        ext x
        apply Iff.intro
        ¬∑ intro hx‚ÇÅ
          refine Or.elim (Nat.lt_or_eq_of_lt hx‚ÇÅ.left) (by simp) ?_
          intro hx‚ÇÇ
          rw [hx‚ÇÇ] at hx‚ÇÅ
          simp at hx‚ÇÅ
        ¬∑ intro hx‚ÇÅ
          exact ‚ü®Nat.lt_trans hx‚ÇÅ (by simp), Nat.ne_of_lt hx‚ÇÅ‚ü©

      have hp_lt_n : p < n := by
        have := subset_of_ssubset hM
        have hp' : p < n + 1 := this hp‚ÇÅ
        exact Or.elim (Nat.lt_or_eq_of_lt hp') id (absurd ¬∑ hc)

      rw [Set.ssubset_def]
      apply And.intro
      ¬∑ show ‚àÄ x, x ‚àà M' ‚Üí x < n
        intro x hx
        simp only [Set.mem_diff, Set.mem_singleton_iff] at hx
        calc x
          _ ‚â§ p := hp‚ÇÇ x hx.left
          _ < n := hp_lt_n
      ¬∑ show ¬¨ ‚àÄ x, x < n ‚Üí x ‚àà M'
        by_contra np
        have := np p hp_lt_n
        simp at this

    -- Consider `g = f' - {‚ü®p, n‚ü©}`. This restriction will allow us to use
    -- the induction hypothesis to prove `g` isn't surjective.
    have ng_surj : ¬¨ Set.SurjOn g M' (Set.Iio n) := by
      refine ih _ hM' g ‚ü®?_, ?_‚ü©
      ¬∑ -- `Set.MapsTo g M' (Set.Iio n)`
        intro x hx
        have hx‚ÇÅ : x ‚àà M := Set.mem_of_mem_diff hx
        apply Or.elim (Nat.lt_or_eq_of_lt $ hg_maps hx‚ÇÅ)
        ¬∑ exact id
        ¬∑ intro hx‚ÇÇ
          rw [‚Üê show g p = n by simp] at hx‚ÇÇ
          exact absurd (hg_inj hx‚ÇÅ hp‚ÇÅ hx‚ÇÇ) hx.right
      ¬∑ -- `Set.InjOn g M'`
        intro x‚ÇÅ hx‚ÇÅ x‚ÇÇ hx‚ÇÇ hg
        have hx‚ÇÅ' : x‚ÇÅ ‚àà M := (Set.diff_subset M {p}) hx‚ÇÅ
        have hx‚ÇÇ' : x‚ÇÇ ‚àà M := (Set.diff_subset M {p}) hx‚ÇÇ
        exact hg_inj hx‚ÇÅ' hx‚ÇÇ' hg

    -- We have shown `g` isn't surjective. This is another way of saying that.
    have ‚ü®a, ha‚ÇÅ, ha‚ÇÇ‚ü© : ‚àÉ a, a < n ‚àß a ‚àâ g '' M' := by
      unfold Set.SurjOn at ng_surj
      rw [Set.subset_def] at ng_surj
      simp only [
        Set.mem_Iio,
        Set.mem_image,
        not_forall,
        not_exists,
        not_and,
        exists_prop
      ] at ng_surj 
      unfold Set.image
      simp only [Set.mem_Iio, Set.mem_setOf_eq, not_exists, not_and]
      exact ng_surj

    -- If `g` isn't surjective then neither is `f`.
    refine absurd (hf_surj $ calc a
      _ < n := ha‚ÇÅ
      _ < n + 1 := by simp) (show ‚Üëa ‚àâ f '' M from ?_)

    suffices g '' M = f '' M by
      rw [‚Üê this]
      show a ‚àâ g '' M
      unfold Set.image at ha‚ÇÇ ‚ä¢
      simp only [Set.mem_Iio, Set.mem_setOf_eq, not_exists, not_and] at ha‚ÇÇ ‚ä¢
      intro x hx
      by_cases hxp : x = p
      ¬∑ rw [if_pos hxp]
        exact (Nat.ne_of_lt ha‚ÇÅ).symm
      ¬∑ refine ha‚ÇÇ x ?_
        exact Set.mem_diff_of_mem hx hxp

    ext x
    simp only [Set.mem_image, Set.mem_Iio]
    apply Iff.intro
    ¬∑ intro ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü©
      by_cases hc‚ÇÅ : y = p
      ¬∑ rw [if_pos hc‚ÇÅ] at hy‚ÇÇ
        rw [hy‚ÇÇ] at ht‚ÇÇ
        exact ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü©
      ¬∑ rw [if_neg hc‚ÇÅ] at hy‚ÇÇ
        by_cases hc‚ÇÇ : y = t
        ¬∑ rw [if_pos hc‚ÇÇ] at hy‚ÇÇ
          exact ‚ü®p, hp‚ÇÅ, hy‚ÇÇ‚ü©
        ¬∑ rw [if_neg hc‚ÇÇ] at hy‚ÇÇ
          exact ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü©
    ¬∑ intro ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü©
      by_cases hc‚ÇÅ : y = p
      ¬∑ refine ‚ü®t, ht‚ÇÅ, ?_‚ü©
        by_cases hc‚ÇÇ : y = t
        ¬∑ rw [hc‚ÇÇ, ht‚ÇÇ] at hy‚ÇÇ
          rw [‚Üê hc‚ÇÅ, ‚Üê hc‚ÇÇ]
          simp only [ite_self, ite_true]
          exact hy‚ÇÇ
        ¬∑ rw [hc‚ÇÅ, ‚Üê Ne.def] at hc‚ÇÇ
          rwa [if_neg hc‚ÇÇ.symm, if_pos rfl, ‚Üê hc‚ÇÅ]
      ¬∑ by_cases hc‚ÇÇ : y = t
        ¬∑ refine ‚ü®p, hp‚ÇÅ, ?_‚ü©
          simp only [ite_self, ite_true]
          rwa [hc‚ÇÇ, ht‚ÇÇ] at hy‚ÇÇ
        ¬∑ refine ‚ü®y, hy‚ÇÅ, ?_‚ü©
          rwa [if_neg hc‚ÇÅ, if_neg hc‚ÇÇ]

/--
No natural number is equinumerous to a proper subset of itself.
-/
theorem pigeonhole_principle {n : ‚Ñï}
  : ‚àÄ M, M ‚äÇ Set.Iio n ‚Üí ‚àÄ f, ¬¨ Set.BijOn f M (Set.Iio n) := by
  intro M hM f nf
  have := pigeonhole_principle_aux n M hM f ‚ü®nf.left, nf.right.left‚ü©
  exact absurd nf.right.right this

/-- #### Corollary 6C

No finite set is equinumerous to a proper subset of itself.
-/
theorem corollary_6c [DecidableEq Œ±] [Nonempty Œ±] {S S' : Finset Œ±} (h : S' ‚äÇ S)
  : ‚àÄ f, ¬¨ Set.BijOn f S.toSet S'.toSet := by
  have ‚ü®T, hT‚ÇÅ, hT‚ÇÇ‚ü© : ‚àÉ T, Disjoint S' T ‚àß S = S' ‚à™ T := by
    refine ‚ü®S \ S', ?_, ?_‚ü©
    ¬∑ intro X hX‚ÇÅ hX‚ÇÇ
      show ‚àÄ t, t ‚àà X ‚Üí t ‚àà ‚ä•
      intro t ht
      have ht‚ÇÇ := hX‚ÇÇ ht
      simp only [Finset.mem_sdiff] at ht‚ÇÇ
      exact absurd (hX‚ÇÅ ht) ht‚ÇÇ.right
    ¬∑ simp only [
        Finset.union_sdiff_self_eq_union,
        Finset.right_eq_union_iff_subset
      ]
      exact subset_of_ssubset h

  -- `hF : S' ‚à™ T ‚âà S`.
  -- `hG :      S ‚âà n`.
  -- `hH : S' ‚à™ T ‚âà n`.
  have ‚ü®F, hF‚ü© := Set.equinumerous_refl S.toSet
  conv at hF => arg 2; rw [hT‚ÇÇ]
  have ‚ü®n, G, hG‚ü© := Set.finite_iff_equinumerous_nat.mp (Finset.finite_toSet S)
  have ‚ü®H, hH‚ü© := Set.equinumerous_trans hF hG

  -- Restrict `H` to `S'` to yield a bijection between `S'` and `m < n`.
  let R := (Set.Iio n) \ (H '' T)
  have hR : Set.BijOn H S' R := by
    refine ‚ü®?_, ?_, ?_‚ü©
    ¬∑ -- `Set.MapsTo H S' R`
      intro x hx
      refine ‚ü®hH.left $ Finset.mem_union_left T hx, ?_‚ü©
      unfold Set.image
      by_contra nx
      simp only [Finset.mem_coe, Set.mem_setOf_eq] at nx

      have ‚ü®a, ha‚ÇÅ, ha‚ÇÇ‚ü© := nx
      have hc‚ÇÅ : a ‚àà S' ‚à™ T := Finset.mem_union_right S' ha‚ÇÅ
      have hc‚ÇÇ : x ‚àà S' ‚à™ T := Finset.mem_union_left T hx
      rw [hH.right.left hc‚ÇÅ hc‚ÇÇ ha‚ÇÇ] at ha‚ÇÅ

      have hx‚ÇÅ : {x} ‚äÜ S' := Finset.singleton_subset_iff.mpr hx
      have hx‚ÇÇ : {x} ‚äÜ T := Finset.singleton_subset_iff.mpr ha‚ÇÅ
      have hx‚ÇÉ := hT‚ÇÅ hx‚ÇÅ hx‚ÇÇ
      simp only [
        Finset.bot_eq_empty,
        Finset.le_eq_subset,
        Finset.singleton_subset_iff,
        Finset.not_mem_empty
      ] at hx‚ÇÉ
    ¬∑ -- `Set.InjOn H S'`
      intro x‚ÇÅ hx‚ÇÅ x‚ÇÇ hx‚ÇÇ h
      have hc‚ÇÅ : x‚ÇÅ ‚àà S' ‚à™ T := Finset.mem_union_left T hx‚ÇÅ
      have hc‚ÇÇ : x‚ÇÇ ‚àà S' ‚à™ T := Finset.mem_union_left T hx‚ÇÇ
      exact hH.right.left hc‚ÇÅ hc‚ÇÇ h
    ¬∑ -- `Set.SurjOn H S' R`
      show ‚àÄ r, r ‚àà R ‚Üí r ‚àà H '' S'
      intro r hr
      unfold Set.image
      simp only [Finset.mem_coe, Set.mem_setOf_eq]
      dsimp only at hr
      have := hH.right.right hr.left
      simp only [
        Finset.coe_union,
        Set.mem_image,
        Set.mem_union,
        Finset.mem_coe
      ] at this
      have ‚ü®x, hx‚ü© := this
      apply Or.elim hx.left
      ¬∑ intro hx'
        exact ‚ü®x, hx', hx.right‚ü©
      ¬∑ intro hx'
        refine absurd ?_ hr.right
        rw [‚Üê hx.right]
        simp only [Set.mem_image, Finset.mem_coe]
        exact ‚ü®x, hx', rfl‚ü©
  
  intro f nf
  have ‚ü®f‚ÇÅ, hf‚ÇÅ‚ü© : ‚àÉ f‚ÇÅ : Œ± ‚Üí ‚Ñï, Set.BijOn f‚ÇÅ S R :=
    Set.equinumerous_trans nf hR
  have ‚ü®f‚ÇÇ, hf‚ÇÇ‚ü© : ‚àÉ f‚ÇÉ : ‚Ñï ‚Üí ‚Ñï, Set.BijOn f‚ÇÉ R (Set.Iio n) := by
    have ‚ü®k, hk‚ÇÅ‚ü© := Set.equinumerous_symm hf‚ÇÅ
    exact Set.equinumerous_trans hk‚ÇÅ hG
    
  refine absurd hf‚ÇÇ (pigeonhole_principle R ?_ f‚ÇÇ)
  show R ‚äÇ Set.Iio n
  apply And.intro
  ¬∑ show ‚àÄ r, r ‚àà R ‚Üí r ‚àà Set.Iio n
    intro _ hr
    exact hr.left
  ¬∑ show ¬¨ ‚àÄ r, r ‚àà Set.Iio n ‚Üí r ‚àà R
    intro nr
    have ‚ü®t, ht‚ÇÅ‚ü© : Finset.Nonempty T := by
      rw [hT‚ÇÇ, Finset.ssubset_def] at h
      have : ¬¨ ‚àÄ x, x ‚àà S' ‚à™ T ‚Üí x ‚àà S' := h.right
      simp only [Finset.mem_union, not_forall, exists_prop] at this
      have ‚ü®x, hx‚ü© := this
      apply Or.elim hx.left
      ¬∑ intro nx
        exact absurd nx hx.right
      ¬∑ intro hx
        exact ‚ü®x, hx‚ü©
    have ht‚ÇÇ : H t ‚àà Set.Iio n := hH.left (Finset.mem_union_right S' ht‚ÇÅ)
    have ht‚ÇÉ : H t ‚àà R := nr (H t) ht‚ÇÇ
    exact absurd ‚ü®t, ht‚ÇÅ, rfl‚ü© ht‚ÇÉ.right

/-- #### Corollary 6D (a)

Any set equinumerous to a proper subset of itself is infinite.
-/
theorem corollary_6d_a (S S' : Set Œ±) (hS : S' ‚äÇ S) (hf : S' ‚âÉ S)
  : Set.Infinite S := by
  sorry

/-- #### Corollary 6D (b)

The set `œâ` is infinite.
-/
theorem corollary_6d_b
  : Set.Infinite (@Set.univ ‚Ñï) := by
  sorry

/-- #### Corollary 6E

Any finite set is equinumerous to a unique natural number.
-/
theorem corollary_6e (S : Set Œ±) (hn : S ‚âÉ Fin n) (hm : S ‚âÉ Fin m)
  : m = n := by
  sorry

/-- #### Lemma 6F

If `C` is a proper subset of a natural number `n`, then `C ‚âà m` for some `m`
less than `n`.
-/
lemma lemma_6f {n : ‚Ñï} (hC : C ‚äÇ Finset.range n)
  : ‚àÉ m : ‚Ñï, m < n ‚àß ‚àÉ f : C ‚Üí Fin m, Function.Bijective f := by
  sorry

theorem corollary_6g (S S' : Set Œ±) (hS : Finite S) (hS' : S' ‚äÜ S)
  : Finite S' := by
  sorry

/-- #### Exercise 6.1

Show that the equation
```
f(m, n) = 2·µê(2n + 1) - 1
```
defines a one-to-one correspondence between `œâ √ó œâ` and `œâ`.
-/
theorem exercise_6_1
  : Function.Bijective (fun p : ‚Ñï √ó ‚Ñï => 2 ^ p.1 * (2 * p.2 + 1) - 1) := by
  sorry

/-- #### Exercise 6.2

Show that in Fig. 32 we have:
```
J(m, n) = [1 + 2 + ‚ãØ + (m + n)] + m
        = (1 / 2)[(m + n)¬≤ + 3m + n].
```
-/
theorem exercise_6_2
  : Function.Bijective
      (fun p : ‚Ñï √ó ‚Ñï => (1 / 2) * ((p.1 + p.2) ^ 2 + 3 * p.1 + p.2)) := by
  sorry

/-- #### Exercise 6.3

Find a one-to-one correspondence between the open unit interval `(0, 1)` and `‚Ñù`
that takes rationals to rationals and irrationals to irrationals.
-/
theorem exercise_6_3
  : True := by
  sorry

/-- #### Exercise 6.4

Construct a one-to-one correspondence between the closed unit interval
```
[0, 1] = {x ‚àà ‚Ñù | 0 ‚â§ x ‚â§ 1}
```
and the open unit interval `(0, 1)`.
-/
theorem exercise_6_4
  : ‚àÉ F, Set.BijOn F (Set.Ioo 0 1) (@Set.univ ‚Ñù) := by
  sorry

end Enderton.Set.Chapter_6
